services:
  # Services from api/docker-compose.yml
  db_postgres:
    container_name: db_postgres
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: backend_faculdade
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - pgdata_api:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  adminer:
    container_name: db_adminer
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app-network

  api:
    container_name: api
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@db_postgres:5432/backend_faculdade
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672
      PORT: 4040
    env_file:
      - ./api/.env
    ports:
      - "4040:4040"
    depends_on:
      - db_postgres
      - rabbitmq
    networks:
      - app-network

  # Services from report-microservice/docker-compose.yml
  db_report:
    container_name: db_report
    image: postgres:15
    environment:
      POSTGRES_USER: adotaai
      POSTGRES_PASSWORD: adotaai123
      POSTGRES_DB: reportdb
    ports:
      - "5433:5432"
    networks:
      - app-network
    volumes:
      - pgdata_report:/var/lib/postgresql/data

  report-service:
    container_name: report-service
    build:
      context: ./report-microservice
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://adotaai:adotaai123@db_report:5432/reportdb
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672
      PORT: 5050
    env_file:
      - ./report-microservice/.env
    ports:
      - "5050:5050"
    depends_on:
      - db_report
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped

  # Notification Microservice
  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://notifications:notifications123@db_notifications:5432/notificationsdb
      PORT: 3003
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672
      NOTIFICATION_QUEUE: notifications
      JWT_SECRET: adotaai-secret-key-2024
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:4040
      NODE_ENV: development
    ports:
      - "3003:3003"
    depends_on:
      - db_notifications
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped

  # Database for Notifications
  db_notifications:
    container_name: db_notifications
    image: postgres:15
    environment:
      POSTGRES_USER: notifications
      POSTGRES_PASSWORD: notifications123
      POSTGRES_DB: notificationsdb
    ports:
      - "5434:5432"
    networks:
      - app-network
    volumes:
      - pgdata_notifications:/var/lib/postgresql/data

networks:
  app-network:
    driver: bridge

volumes:
  pgdata_api:
  pgdata_report:
  pgdata_notifications: 